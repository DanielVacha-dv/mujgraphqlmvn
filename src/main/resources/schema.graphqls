#http://localhost:8080/graphql
schema {
    query: Query
    mutation: Mutation
}



type Query {
    person(id: ID!): Person
    allPeople: [Person]
    allPersonInfo: [personInfo]
#m2m
    allCommentMany: [CommentMany]
    commentMany(id: ID!):CommentMany
    allTagMany: [Tag]
    tagMany(id: ID!): Tag
#o2m
    allPostek: [Post]
    post(id:ID!): Post

}





type Mutation {
#    o2o
    createPerson(input: CreatePersonInput!) : Person!
    makePPInfo(input1: CreatePersonInput!,input2: CreatePersonInfoInput!) : Person!
    deletePerson(id: ID!) : Boolean
    updateName(input: UpdateNameInput!) : Person!
    updateAge(input: UpdateAgeInput!) : Person!
#   M2M
    makeCommentM2M(input: CreateCommentM2MInput!) : CommentMany!
    createCommentTagM2M(input1: CreateCommentM2MInput!,input2: CreateTagM2MInput) : CommentMany!
#    O2M
    makePostO2M(input1: CreatePostInput!,input2: CreatePostCommentInput!) : Post!
#    makePostComment(input: CreatePostCommentInput!) : Post!
}


#https://github.com/SuperEvenSteven/spring-boot-graphql-example
#{
#    person (id: 3){
#        id,
#        firstName,
#        middleName,
#        lastName
#    }
#}


